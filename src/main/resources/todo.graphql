type User
@size(max: 10000)
{
  username: String!
  active: boolean @mutable
  age: int
  todos: [Todo] @relation(field: "user") @multiplicity(max: 1000)
}

type Todo
@size(max: 100000)
@selectivity(fields: [{
    field: ["status"]
    distinct: 50000
    hotspot: true
    prob: 0.5
  },{
    field: ["user.username"]
    distinct: 1000
    prob: 0.001
  }
  ]
)
{
  title: String
    @mutable
  status: boolean
    @mutable
  priority: int!

  user: User! @relation(field: "todos")
}

type Query
{
  todosById: Todo @sql(where: "_id = $id")
  todosByUser: [Todo]
    @sql(where: "user.username = $username",
         order: [{field: "_id", direction:"DESC"}])
  todosByCompleted: [Todo]
    @sql(where: "user.username = $username AND status = $status",
         order: [{field: "priority", direction:"DESC"}])
}

## Queries must come after all type definitions
query GetTodosByCompleted($todo_id: ID)
@sla(throughput_per_second: 1000, latency_ms: 100)
{
  todosByCompleted(_id: $todo_id) {
    title
    status
    user {
      _id
    }
  }
}

query GetTodosById($todo_id: ID)
@sla(throughput_per_second: 1000, latency_ms: 100)
{
  todosById(_id: $todo_id) {
    title
    status
    user {
      _id
    }
  }
}

query GetTodosByUser($username: String)
@sla(throughput_per_second: 1, latency_ms: 2000)
{
  todosByUser(_id: $user_id) {
    title
    status
    user {
      _id
    }
  }
}

fragment UpdateStatus on Todo
   @update(where: "_id = $todo_id")
{
  status
}

fragment CreateTodo on Todo
   @sla(max_tables: 1)
   @insert
{
  title
  status
  user {
    _id
  }
}